local redzlib = loadstring(game:HttpGet("https://raw.githubusercontent.com/SLK-gaming/New-Gui/refs/heads/main/New-Redz.lua"))()

local Window = redzlib:MakeWindow({
  Title = "Hutao Hub [Free]",
  SubTitle = "by SLK Gaming",
  SaveFolder = "Hutao Hub - 99 Night.lua"
})

Window:AddMinimizeButton({
    Button = { Image = "rbxassetid://90508203972003", BackgroundTransparency = 0 },
    Corner = { CornerRadius = UDim.new(0, 5) },
})

local TabDiscord = Window:MakeTab({"Discord", "info"})

local TabMain = Window:MakeTab({"Main", "home"})

local TabFarm = Window:MakeTab({"Farm", "gem"})

local TabItem = Window:MakeTab({"Items", "swords"})

local TabTeleport = Window:MakeTab({"Teleport", "locate"})

local TabVisual = Window:MakeTab({"Visual", "user"})

local TabMisc = Window:MakeTab({"Misc", "menu"})

local TabSettings = Window:MakeTab({"Settings", "settings"})

---------------------------------------------------------------------------------
-- T·ªïng H·ª£p Logic
---------------------------------------------------------------------------------

task.spawn(function()
    repeat task.wait() until game:IsLoaded()

    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer

    -- ƒê·ª£i GUI c√¢u c√° xu·∫•t hi·ªán (kh√¥ng ch·∫∑n thread ch√≠nh)
    local Interface = LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("Interface", 10)
    if not Interface then return end

    local FishingCatchFrame = Interface:FindFirstChild("FishingCatchFrame")
    if FishingCatchFrame and FishingCatchFrame:FindFirstChild("TimingBar") then
        local successArea = FishingCatchFrame.TimingBar:WaitForChild("SuccessArea", 5)
        if successArea then
            successArea:GetPropertyChangedSignal("Size"):Connect(function()
                pcall(function()
                    successArea.Position = UDim2.new(0.5, 0, 0, 0)
                    successArea.Size = UDim2.new(1, 0, 1, 0)
                end)
            end)
        end
    end
end)

-- üåç Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Lighting = game:GetService("Lighting")
local RunService = game:GetService("RunService")

-- üí° Thi·∫øt l·∫≠p √°nh s√°ng c∆° b·∫£n
Lighting.ClockTime = 14
Lighting.GlobalShadows = false






-- ======= FIXED & CLEANED BRING/ITEMS SCRIPT =======
-- Services & core refs (ƒë·∫∑t l√™n ƒë·∫ßu ƒë·ªÉ c√°c h√†m d√πng ƒë∆∞·ª£c ngay)
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

-- Item lists (ƒë√£ lo·∫°i tr√πng l·∫∑p v√† s·ª≠a d·∫•u ph·∫©y / quotes)
local ie = {
    "Bandage", "Bolt", "Broken Fan", "Broken Microwave", "Cake", "Carrot", "Chair", "Coal", "Coin Stack",
    "Cooked Morsel", "Cooked Steak", "Fuel Canister", "Iron Body", "Leather Armor", "Log", "MadKit", "Metal Chair",
    "MedKit", "Old Car Engine", "Old Flashlight", "Old Radio", "Revolver", "Revolver Ammo", "Rifle", "Rifle Ammo",
    "Morsel", "Sheet Metal", "Steak", "Tyre", "Washing Machine", "Cultist Gem", "Gem of the Forest Fragment", "Frozen Shuriken",
    "Tactical Shotgun", "Snowball", "Kunai"
}

local me = {
    "Bunny", "Wolf", "Alpha Wolf", "Bear", "Crossbow Cultist", "Alien", "Alien Elite", "Polar Bear",
    "Arctic Fox", "Mammoth", "Cultist", "Cultist Melee", "Cultist Crossbow", "Cultist Juggernaut"
}

-- Bring categories
local BlueprintItems = {"Crafting Blueprint", "Defense Blueprint", "Furniture Blueprint"}
local selectedBlueprintItems = {}
local PeltsItems = {"Bunny Foot", "Wolf Pelt", "Alpha Wolf Pelt", "Bear Pelt", "Arctic Fox Pelt", "Polar Bear Pelt"}
local selectedPeltsItems = {}
local junkItems = {
    "Bolt", "Sheet Metal", "UFO Junk", "UFO Component", "Broken Fan", "Old Radio",
    "Broken Microwave", "Tyre", "Metal Chair", "Old Car Engine", "Washing Machine",
    "Cultist Experiment", "Cultist Prototype", "UFO Scrap", "Cultist Gem",
    "Gem of the Forest Fragment", "Feather", "Old Boot"
}
local selectedJunkItems = {}
local fuelItems = {"Log", "Chair", "Coal", "Fuel Canister", "Oil Barrel"}
local selectedFuelItems = {}

local foodItems = {
    "Cake", "Cooked Steak", "Cooked Morsel", "Ribs", "Salmon", "Cooked Salmon",
    "Cooked Ribs", "Mackerel", "Cooked Mackerel", "Steak", "Morsel", "Berry",
    "Carrot", "Stew", "Hearty Stew", "Corn", "Pumpkin", "Meat? Sandwich",
    "Seafood Chowder", "Steak Dinner", "Pumpkin Soup", "BBQ Ribs", "Carrot Cake",
    "Jar o' Jelly", "Clownfish", "Swordfish", "Jellyfish", "Char", "Eel", "Shark",
    "Cooked Clownfish", "Cooked Swordfish", "Cooked Jellyfish",
    "Cooked Char", "Cooked Eel", "Cooked Shark"
}
local selectedFoodItems = {}

local medicalItems = {"Bandage", "MedKit"}
local selectedMedicalItems = {}
local equipmentItems = {
    "Revolver", "Rifle", "Revolver Ammo", "Rifle Ammo", "Giant Sack", "Good Sack",
    "Strong Axe", "Good Axe", "Frozen Shuriken", "Tactical Shotgun", "Snowball", "Kunai",
    "Leather Body", "Poison Armour", "Iron Body", "Thorn Body", "Riot Shield", "Alien Armour",
    "Red Key", "Blue Key", "Yellow Key", "Grey Key", "Frog Key", "Chili Seeds",
    "Flower Seeds", "Berry Seeds", "Firefly Seeds", "Old Rod", "Good Rod", "Strong Rod"
}
local selectedEquipmentItems = {}

-- State variables
local isCollecting = false
local originalPosition = nil
local autoBringEnabled = false

-- Toggle states for each category
local BlueprintToggleEnabled = false
local PeltsToggleEnabled = false
local junkToggleEnabled = false
local fuelToggleEnabled = false
local foodToggleEnabled = false
local medicalToggleEnabled = false
local equipmentToggleEnabled = false

-- Loop control flags
local BlueprintLoopRunning = false
local PeltsLoopRunning = false
local junkLoopRunning = false
local fuelLoopRunning = false
local foodLoopRunning = false
local medicalLoopRunning = false
local equipmentLoopRunning = false

-- Enhanced smooth pulling movement with easing
-- startCFrame and endCFrame are CFrame values
local function smoothPullToItem(startCFrame, endCFrame, duration)
    if not startCFrame or not endCFrame or duration <= 0 then
        return
    end

    local player = Players.LocalPlayer
    if not player or not player.Character then return end
    local hrp = player.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    local startTime = tick()
    spawn(function()
        while tick() - startTime < duration do
            if not hrp then break end
            local elapsed = tick() - startTime
            local progress = math.clamp(elapsed / duration, 0, 1)

            -- Ease-in-out
            local easedProgress
            if progress < 0.5 then
                easedProgress = 2 * progress * progress
            else
                easedProgress = 1 - math.pow(-2 * progress + 2, 2) / 2
            end

            local currentPos = startCFrame.Position:Lerp(endCFrame.Position, easedProgress)
            local lookDirection = endCFrame.Position - currentPos

            if lookDirection.Magnitude > 0 then
                hrp.CFrame = CFrame.lookAt(currentPos, currentPos + lookDirection.Unit)
            else
                hrp.CFrame = CFrame.new(currentPos)
            end

            task.wait()
        end

        -- final snap
        if hrp then
            hrp.CFrame = endCFrame
        end
    end)

    task.wait(duration)
end

-- Enhanced item pulling effect (itemPart is BasePart)
local function createItemPullEffect(itemPart, targetPos, duration)
    if not itemPart or not itemPart.Parent or duration <= 0 then return end

    local startPos = itemPart.Position
    local startTime = tick()

    spawn(function()
        while tick() - startTime < duration do
            if not itemPart or not itemPart.Parent then break end
            local elapsed = tick() - startTime
            local progress = math.clamp(elapsed / duration, 0, 1)

            -- ease-out cubic
            local easedProgress = 1 - math.pow(1 - progress, 3)

            local currentPos = Vector3.new(
                startPos.X + (targetPos.X - startPos.X) * easedProgress,
                startPos.Y + (targetPos.Y - startPos.Y) * easedProgress,
                startPos.Z + (targetPos.Z - startPos.Z) * easedProgress
            )

            pcall(function()
                itemPart.CFrame = CFrame.new(currentPos)
                if itemPart:FindFirstChild("Velocity") == nil then
                    itemPart.Velocity = Vector3.new(0, 0, 0)
                else
                    itemPart.Velocity = Vector3.new(0, 0, 0)
                end
                itemPart.RotVelocity = Vector3.new(0, 0, 0)
            end)

            task.wait()
        end

        -- final
        pcall(function()
            itemPart.CFrame = CFrame.new(targetPos)
            itemPart.Velocity = Vector3.new(0, 0, 0)
            itemPart.RotVelocity = Vector3.new(0, 0, 0)
        end)
    end)

    task.wait(duration)
end

-- Enhanced bypass bring system with smooth pulling (no noclip)
-- items: table of item names
-- stopFlag: function that returns true to continue, false to stop (optional)
local function bypassBringSystem(items, stopFlag)
    if isCollecting then
        return
    end

    isCollecting = true
    local player = Players.LocalPlayer
    if not player or not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
        isCollecting = false
        return
    end

    local hrp = player.Character.HumanoidRootPart
    originalPosition = hrp.CFrame

    for _, itemName in ipairs(items) do
        if stopFlag and not stopFlag() then
            break
        end

        local itemsFound = {}

        -- Find items (search Workspace descendants)
        for _, item in ipairs(Workspace:GetDescendants()) do
            if item.Name == itemName and (item:IsA("BasePart") or item:IsA("Model")) then
                local itemPart = item:IsA("Model") and (item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")) or item
                if itemPart and itemPart.Parent ~= player.Character then
                    table.insert(itemsFound, {item = item, part = itemPart})
                end
            end
        end

        for _, itemData in ipairs(itemsFound) do
            if stopFlag and not stopFlag() then
                break
            end

            local item = itemData.item
            local itemPart = itemData.part

            if itemPart and itemPart.Parent then
                -- Step 1: Smooth pull player to just above the item
                local itemPosCFrame = itemPart.CFrame + Vector3.new(0, 5, 0)
                smoothPullToItem(hrp.CFrame, itemPosCFrame, 1.2)

                -- Step 2: Pull item to player (magnetic)
                local playerTargetPos = hrp.Position + Vector3.new(0, -1, 0)
                createItemPullEffect(itemPart, playerTargetPos, 0.8)

                -- Step 3: Keep item attached visually while returning
                local keepAttached = true
                local attachThread
                attachThread = spawn(function()
                    while keepAttached do
                        if stopFlag and not stopFlag() then
                            keepAttached = false
                            break
                        end
                        if itemPart and itemPart.Parent and hrp and hrp.Parent then
                            pcall(function()
                                local offset = Vector3.new(
                                    math.sin(tick() * 2) * 0.5,
                                    -1 + math.cos(tick() * 3) * 0.2,
                                    math.cos(tick() * 2) * 0.5
                                )
                                itemPart.CFrame = CFrame.new(hrp.Position + offset)
                                itemPart.Velocity = Vector3.new(0, 0, 0)
                                itemPart.RotVelocity = Vector3.new(0, 0, 0)
                            end)
                        end
                        task.wait(0.03)
                    end
                end)

                -- Smooth return to original position
                smoothPullToItem(hrp.CFrame, originalPosition, 1.0)

                -- Stop attachment and gently drop item near original
                keepAttached = false
                task.wait(0.1)

                pcall(function()
                    local landingPos = originalPosition.Position + Vector3.new(
                        math.random(-4, 4),
                        2,
                        math.random(-4, 4)
                    )
                    createItemPullEffect(itemPart, landingPos, 0.5)
                end)
            end

            task.wait(0.5)
        end
    end

    -- Ensure player returned
    if originalPosition and LocalPlayer and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        LocalPlayer.Character.HumanoidRootPart.CFrame = originalPosition
    end

    isCollecting = false
end

-- Added new scrap logic variables
local scrapjunkItems = {
    "Log", "Chair", "Tyre", "Bolt", "Broken Fan", "Broken Microwave", "Sheet Metal",
    "Old Radio", "Washing Machine", "Old Car Engine", "Cultist Gem", "Gem of the Forest Fragment"
}
local autoScrapPos = Vector3.new(21, 20, -5)
local selectedScrapItem = nil
local autoScrapItemsEnabled = false

-- Utility functions (use proper global refs)
local function wiki(nome)
    local c = 0
    local itemsFolder = Workspace:FindFirstChild("Items")
    if not itemsFolder then return 0 end
    for _, i in ipairs(itemsFolder:GetChildren()) do
        if i.Name == nome then
            c = c + 1
        end
    end
    return c
end

local function ghn()
    if not LocalPlayer or not LocalPlayer.PlayerGui then return 100 end
    local bar = LocalPlayer.PlayerGui:FindFirstChild("Interface") and LocalPlayer.PlayerGui.Interface:FindFirstChild("StatBars")
    if not bar or not bar:FindFirstChild("HungerBar") or not bar.HungerBar:FindFirstChild("Bar") then
        return 100
    end
    return math.floor(bar.HungerBar.Bar.Size.X.Scale * 100)
end

local function feed(nome)
    local itemsFolder = Workspace:FindFirstChild("Items")
    if not itemsFolder then return end
    for _, item in ipairs(itemsFolder:GetChildren()) do
        if item.Name == nome then
            pcall(function()
                local remote = ReplicatedStorage:WaitForChild("RemoteEvents")
                if remote and remote.RequestConsumeItem then
                    remote.RequestConsumeItem:InvokeServer(item)
                end
            end)
            break
        end
    end
end

-- Function to teleport player to item, pick it up, then return with item
-- itemNames: table of names
-- originalPosition: CFrame or Vector3 (if Vector3 passed, will be converted)
local function bringItemsByPlayerTP(itemNames, originalPosition)
    if not LocalPlayer or not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return
    end

    local hrp = LocalPlayer.Character.HumanoidRootPart
    local itemsFound = {}

    -- Normalize originalPosition to CFrame
    local origCFrame
    if typeof(originalPosition) == "CFrame" then
        origCFrame = originalPosition
    elseif typeof(originalPosition) == "Vector3" then
        origCFrame = CFrame.new(originalPosition)
    else
        origCFrame = hrp.CFrame
    end

    -- Collect matches
    for _, itemName in ipairs(itemNames) do
        for _, item in ipairs(Workspace:GetDescendants()) do
            if item.Name == itemName and (item:IsA("BasePart") or item:IsA("Model")) then
                local part = item:IsA("Model") and (item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")) or item
                if part and part:IsA("BasePart") then
                    table.insert(itemsFound, {item = item, part = part})
                end
            end
        end
    end

    -- Process found items
    for _, itemData in ipairs(itemsFound) do
        local item = itemData.item
        local part = itemData.part

        if item and item.Parent and part then
            -- Teleport to item (slightly above)
            local itemPosition = part.Position + Vector3.new(0, 3, 0)
            hrp.CFrame = CFrame.new(itemPosition)
            task.wait(0.2)

            -- Start dragging server event
            pcall(function()
                local remote = ReplicatedStorage:FindFirstChild("RemoteEvents")
                if remote and remote.RequestStartDraggingItem then
                    remote.RequestStartDraggingItem:FireServer(item)
                end
            end)

            task.wait(0.3)

            -- Teleport back to original
            hrp.CFrame = origCFrame
            task.wait(0.2)

            -- Stop dragging
            pcall(function()
                local remote = ReplicatedStorage:FindFirstChild("RemoteEvents")
                if remote and remote.StopDraggingItem then
                    remote.StopDraggingItem:FireServer(item)
                end
            end)

            task.wait(0.5)
        end
    end

    -- Ensure player returned
    if origCFrame and LocalPlayer and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        LocalPlayer.Character.HumanoidRootPart.CFrame = origCFrame
    end
end

-- ======= End of fixed script =======



---------------------------------------------------------------------------------
-- Ph·∫ßn Discord
---------------------------------------------------------------------------------

TabDiscord:AddDiscordInvite({
    Name = "Hutao Hub [Free] | Community",
    Description = "Tham gia nh√≥m discord ƒë·ªÉ nh·∫≠n th√¥ng b√°o update m·ªõi",
    Logo = "rbxassetid://90508203972003",
    Invite = "http://discord.gg/7aR7kNVt4g",
})


---------------------------------------------------------------------------------
-- Ph·∫ßn Main
---------------------------------------------------------------------------------


-- ‚öîÔ∏è COMBAT SYSTEM (FULL MERGED VERSION: KILL AURA + CHOP AURA)
-----------------------------------------------------------
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer

-- ‚öôÔ∏è Bi·∫øn ƒëi·ªÅu khi·ªÉn ch√≠nh
local scan_map = false
local killAuraToggle = false
local chopAuraToggle = false
local auraRadius = 50
local currentAmount = 0

-- ü™ì ID damage theo tool
local toolsDamageIDs = {
    ["Old Axe"] = "3_7367831688",
    ["Good Axe"] = "112_7367831688",
    ["Strong Axe"] = "116_7367831688",
    ["Ice Axe"] = "116_7367831688",
    ["Admin Axe"] = "116_7367831688",
    ["Morningstar"] = "116_7367831688",
    ["Laser Sword"] = "116_7367831688",
    ["Ice Sword"] = "116_7367831688",
    ["Katana"] = "116_7367831688",
    ["Trident"] = "116_7367831688",
    ["Poison Spear"] = "116_7367831688",
    ["Chainsaw"] = "647_8992824875",
    ["Spear"] = "196_8999010016"
}

-- ‚öîÔ∏è L·∫•y damage ID theo t√™n tool
local function getToolDamageID(toolName)
    return toolsDamageIDs[toolName] or nil
end

-- üß≠ H√†m qu√©t m·ª•c ti√™u (placeholder)
local function scanForTargets()
    if not scan_map then return end
end

-- üîÅ Toggle state
local function toggleKillAura(state)
    killAuraToggle = state
end

local function toggleChopAura(state)
    chopAuraToggle = state
end

-- üß§ Equip / Unequip tool
local function equipTool(tool)
    if tool then
        ReplicatedStorage:WaitForChild("RemoteEvents").EquipItemHandle:FireServer("FireAllClients", tool)
    end
end

local function unequipTool(tool)
    if tool then
        ReplicatedStorage:WaitForChild("RemoteEvents").UnequipItemHandle:FireServer("FireAllClients", tool)
    end
end

-- üí´ H√†m l·∫•y tool c√≥ th·ªÉ g√¢y damage
local function getAnyToolWithDamageID(isChopAura)
    for toolName, damageID in pairs(toolsDamageIDs) do
        if isChopAura and toolName ~= "Old Axe" and toolName ~= "Good Axe" and toolName ~= "Strong Axe" 
        and toolName ~= "Ice Axe" and toolName ~= "Chainsaw" then
            continue
        end
        local tool = LocalPlayer:FindFirstChild("Inventory") and LocalPlayer.Inventory:FindFirstChild(toolName)
        if tool then
            return tool, damageID
        end
    end
    return nil, nil
end

-----------------------------------------------------------
-- ‚öîÔ∏è KILL AURA (T·ª± ƒë·ªông ƒë√°nh qu√°i)
-----------------------------------------------------------
local function killAuraLoop()
    while killAuraToggle do
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local hrp = character:FindFirstChild("HumanoidRootPart")
        if hrp then
            local tool, damageID = getAnyToolWithDamageID(false)
            if tool and damageID then
                equipTool(tool)
                for _, mob in ipairs(Workspace.Characters:GetChildren()) do
                    if mob:IsA("Model") and mob ~= character then
                        local part = mob:FindFirstChildWhichIsA("BasePart")
                        if part and (part.Position - hrp.Position).Magnitude <= auraRadius then
                            pcall(function()
                                ReplicatedStorage:WaitForChild("RemoteEvents").ToolDamageObject:InvokeServer(
                                    mob,
                                    tool,
                                    damageID,
                                    CFrame.new(part.Position)
                                )
                            end)
                        end
                    end
                end
                task.wait(0.1)
            else
                task.wait(1)
            end
        else
            task.wait(0.5)
        end
    end
end

-----------------------------------------------------------
-- üå≥ CHOP AURA (T·ª± ƒë·ªông ch·∫∑t c√¢y, ƒë√°...)
-----------------------------------------------------------
local function chopAuraLoop()
    while chopAuraToggle do
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local hrp = character:FindFirstChild("HumanoidRootPart")
        if hrp then
            local tool, baseDamageID = getAnyToolWithDamageID(true)
            if tool and baseDamageID then
                equipTool(tool)
                currentAmount = currentAmount + 1
                local trees = {}
                local map = Workspace:FindFirstChild("Map")

                -- ü™µ Qu√©t to√†n b·ªô c√¢y trong Map
                if map then
                    if map:FindFirstChild("Foliage") then
                        for _, obj in ipairs(map.Foliage:GetChildren()) do
                            if obj:IsA("Model") and (obj.Name == "Small Tree" or obj.Name == "Snowy Small Tree") then
                                table.insert(trees, obj)
                            end
                        end
                    end
                    if map:FindFirstChild("Landmarks") then
                        for _, obj in ipairs(map.Landmarks:GetChildren()) do
                            if obj:IsA("Model") and obj.Name == "Small Tree" then
                                table.insert(trees, obj)
                            end
                        end
                    end
                end

                -- üî® T·∫•n c√¥ng t·ª´ng c√¢y g·∫ßn ng∆∞·ªùi ch∆°i
                for _, tree in ipairs(trees) do
                    local trunk = tree:FindFirstChild("Trunk")
                    if trunk and trunk:IsA("BasePart") and (trunk.Position - hrp.Position).Magnitude <= auraRadius then
                        local alreadyHit = false
                        task.spawn(function()
                            while chopAuraToggle and tree and tree.Parent and not alreadyHit do
                                alreadyHit = true
                                currentAmount = currentAmount + 1
                                pcall(function()
                                    ReplicatedStorage:WaitForChild("RemoteEvents").ToolDamageObject:InvokeServer(
                                        tree,
                                        tool,
                                        tostring(currentAmount) .. "_7367831688",
                                        CFrame.new(-2.96, 4.55, -75.95, 0.8962, 0, 0.4436, 0, 1, 0, -0.4436, 0, 0.8962)
                                    )
                                end)
                                task.wait(0.5)
                            end
                        end)
                    end
                end
                task.wait(0.1)
            else
                task.wait(1)
            end
        else
            task.wait(0.5)
        end
    end
end

-----------------------------------------------------------
-- üåÄ LOOP CHUNG (n·∫øu c·∫ßn th√™m scan logic)
-----------------------------------------------------------
RunService.Heartbeat:Connect(function()
    if killAuraToggle or chopAuraToggle then
        scanForTargets()
    end
end)

-----------------------------------------------------------
-- üß† TOGGLE GUI
-----------------------------------------------------------
TabMain:AddToggle({
    Name = "Kill Aura",
    Description = "T·ª± ƒë·ªông t·∫•n c√¥ng qu√°i v·∫≠t xung quanh b·∫±ng v≈© kh√≠ chi·∫øn ƒë·∫•u",
    Default = _G.KillAura or false,
    Callback = function(Value)
        _G.KillAura = Value
        toggleKillAura(Value)
        if Value then
            task.spawn(killAuraLoop)
        else
            local tool, _ = getAnyToolWithDamageID(false)
            unequipTool(tool)
        end
    end
})

TabMain:AddToggle({
    Name = "Chop Aura",
    Description = "T·ª± ƒë·ªông ch·∫∑t c√¢y, ƒë√° ho·∫∑c t√†i nguy√™n g·∫ßn b·∫°n",
    Default = _G.ChopAura or false,
    Callback = function(Value)
        _G.ChopAura = Value
        toggleChopAura(Value)
        if Value then
            task.spawn(chopAuraLoop)
        else
            local tool, _ = getAnyToolWithDamageID(true)
            unequipTool(tool)
        end
    end
})



-- üìè Aura Radius Slider (chu·∫©n Fluent GUI)
TabMain:AddSlider({
    Name = "Aura Radius",
    Description = "ƒêi·ªÅu ch·ªânh ph·∫°m vi t·∫•n c√¥ng t·ª± ƒë·ªông c·ªßa Kill Aura v√† Chop Aura",
    Min = 20,
    Max = 800,
    Default = _G.AuraRadius or 50,
    Callback = function(Value)
        auraRadius = math.clamp(Value, 10, 800)
        _G.AuraRadius = auraRadius
    end
})


local Section = TabMain:AddSection({"Plant"})


-- üå± AUTO PLANT SYSTEM (FULL MERGED VERSION)
------------------------------------------------------

-- ‚öôÔ∏è Bi·∫øn v√† h√†m ch√≠nh
local AutoPlantToggle = _G.AutoPlant or false

-- üìç V·ªã tr√≠ tr·ªìng c√¢y (c√≥ th·ªÉ thay ƒë·ªïi)
local plantPosition = Vector3.new(-41.2053, 1.0633, 29.2236)

-- ü™¥ H√†m auto plant
local function autoplant()
    while AutoPlantToggle do
        local success, err = pcall(function()
            local args = {
                Instance.new("Model"), -- placeholder item
                plantPosition
            }

            local remote = game:GetService("ReplicatedStorage")
                :WaitForChild("RemoteEvents")
                :WaitForChild("RequestPlantItem", 5) -- timeout 5s

            if remote then
                remote:InvokeServer(unpack(args))
            else
                warn("[AutoPlant] Remote RequestPlantItem not found.")
            end
        end)

        if not success then
            warn("[AutoPlant Error]:", err)
        end

        task.wait(1) -- delay gi·ªØa m·ªói l·∫ßn tr·ªìng
    end
end

------------------------------------------------------
-- üå± GUI Toggle
TabMain:AddToggle({
    Name = "Auto Plant",
    Description = "T·ª± ƒë·ªông tr·ªìng c√¢y ho·∫∑c t√†i nguy√™n khi c√≥ h·∫°t gi·ªëng trong t√∫i",
    Default = AutoPlantToggle,
    Callback = function(Value)
        _G.AutoPlant = Value
        AutoPlantToggle = Value

        if Value then
            task.spawn(autoplant)
        end
    end
})



local Section = TabMain:AddSection({"Feed"})

-- üçñ AUTO FEED SYSTEM (FULL MERGED VERSION)
------------------------------------------------------

-- ‚öôÔ∏è C·∫•u h√¨nh ban ƒë·∫ßu
local autoFeedToggle = false
local selectedFood = _G.SelectedFood or {}
local hungerThreshold = _G.HungerThreshold or 75
local alwaysFeedEnabledItems = {}

-- üçé Danh s√°ch th·ª©c ƒÉn h·ª£p l·ªá
local alimentos = {
    "Apple",
    "Berry",
    "Carrot",
    "Cake",
    "Chili",
    "Cooked Clownfish", 
    "Cooked Swordfish", 
    "Cooked Jellyfish", 
    "Cooked Char", 
    "Cooked Eel", 
    "Cooked Shark",  -- <== th√™m d·∫•u ph·∫©y b·ªã thi·∫øu
    "Cooked Ribs",
    "Cooked Mackerel",
    "Cooked Salmon",
    "Cooked Morsel",
    "Cooked Steak"
}

------------------------------------------------------
-- üçΩÔ∏è GUI: Ch·ªçn lo·∫°i th·ª©c ƒÉn
TabMain:AddDropdown({
    Name = "Select Food",
    Description = "Ch·ªçn lo·∫°i th·ª©c ƒÉn b·∫°n mu·ªën d√πng khi t·ª± ƒë·ªông ƒÉn",
    Options = alimentos,
    Default = selectedFood,
    Multi = true,
    Callback = function(Value)
        selectedFood = Value
        _G.SelectedFood = Value
    end
})

------------------------------------------------------
-- üî¢ GUI: Thanh m·ª©c ƒë·ªô ƒë√≥i s·∫Ω t·ª± ƒÉn
TabMain:AddSlider({
    Name = "Feed Amount",
    Description = "T·ª± ƒë·ªông ƒÉn khi thanh ƒë√≥i (%) th·∫•p h∆°n gi√° tr·ªã n√†y",
    Min = 0,
    Max = 100,
    Default = hungerThreshold,
    Callback = function(Value)
        hungerThreshold = math.clamp(Value, 0, 100)
        _G.HungerThreshold = hungerThreshold
    end
})

------------------------------------------------------
-- ü§ñ GUI: Toggle b·∫≠t/t·∫Øt Auto Feed
TabMain:AddToggle({
    Name = "Auto Feed",
    Description = "T·ª± ƒë·ªông ƒÉn th·ª©c ƒÉn ƒë√£ ch·ªçn khi ƒë√≥i",
    Default = _G.AutoFeed or false,
    Callback = function(Value)
        autoFeedToggle = Value
        _G.AutoFeed = Value

        if Value then
            task.spawn(function()
                while autoFeedToggle do
                    task.wait(0.075)

                    -- ‚ö†Ô∏è Ki·ªÉm tra danh s√°ch th·ª©c ƒÉn c√≥ h·ª£p l·ªá kh√¥ng
                    if type(selectedFood) ~= "table" or #selectedFood == 0 then
                        warn("[AutoFeed] No food selected!")
                        autoFeedToggle = false
                        break
                    end

                    -- ‚öôÔ∏è Ki·ªÉm tra ƒëi·ªÅu ki·ªán ƒë√≥i
                    if ghn and feed and ghn() <= hungerThreshold then
                        feed(selectedFood)
                    end
                end
            end)
        end
    end
})




local Section = TabMain:AddSection({"Campfire"})

-- üî• AUTO UPGRADE CAMPFIRE (FULL VERSION)
------------------------------------------------------
-- ‚öôÔ∏è C·∫•u h√¨nh c∆° b·∫£n
local campfireFuelItems = {"Log", "Coal", "Chair", "Fuel Canister", "Oil Barrel", "Biofuel"}
local campfireDropPos = Vector3.new(0, 19, 0)

local selectedCampfireItem = _G.SelectedCampfireItem or nil
local autoUpgradeCampfireEnabled = _G.AutoUpgradeCampfireEnabled or false

-- ‚öíÔ∏è H√†m di chuy·ªÉn item t·ªõi v·ªã tr√≠ Campfire
local function moveItemToPos(item, position)
    if item and item:IsA("Model") then
        local primary = item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
        if primary then
            pcall(function()
                primary.CFrame = CFrame.new(position)
            end)
        end
    end
end

------------------------------------------------------
-- üß≠ GUI: Dropdown ch·ªçn v·∫≠t ph·∫©m n√¢ng c·∫•p
TabMain:AddDropdown({
    Name = "Select Campfire Item",
    Description = "Ch·ªçn v·∫≠t ph·∫©m d√πng ƒë·ªÉ n√¢ng c·∫•p campfire",
    Options = campfireFuelItems,
    Default = selectedCampfireItem,
    Multi = false,
    AllowNone = true,
    Callback = function(option)
        selectedCampfireItem = option
        _G.SelectedCampfireItem = option
    end
})

------------------------------------------------------
-- üî• GUI: Toggle t·ª± ƒë·ªông n√¢ng c·∫•p Campfire
TabMain:AddToggle({
    Name = "Auto Upgrade Campfire",
    Description = "T·ª± ƒë·ªông th·∫£ v·∫≠t ph·∫©m ƒë√£ ch·ªçn v√†o campfire ƒë·ªÉ n√¢ng c·∫•p",
    Default = autoUpgradeCampfireEnabled,
    Callback = function(Value)
        autoUpgradeCampfireEnabled = Value
        _G.AutoUpgradeCampfireEnabled = Value

        if Value then
            task.spawn(function()
                while autoUpgradeCampfireEnabled do
                    if selectedCampfireItem then
                        local items = {}

                        -- üîç T√¨m t·∫•t c·∫£ item trong workspace c√≥ t√™n tr√πng
                        local itemFolder = workspace:FindFirstChild("Items")
                        if itemFolder then
                            for _, item in ipairs(itemFolder:GetChildren()) do
                                if item.Name == selectedCampfireItem then
                                    table.insert(items, item)
                                end
                            end
                        end

                        -- ü™µ Di chuy·ªÉn t·ªëi ƒëa 10 item ƒë·∫øn campfire
                        local count = math.min(10, #items)
                        for i = 1, count do
                            moveItemToPos(items[i], campfireDropPos)
                        end
                    end

                    task.wait(1) -- delay gi·ªØa m·ªói l·∫ßn ki·ªÉm tra
                end
            end)
        end
    end
})


local Section = TabMain:AddSection({"Scrap Items"})

-- üçñ AUTO COOK SYSTEM (FULL MERGED VERSION)
------------------------------------------------------

-- ‚öôÔ∏è Bi·∫øn v√† c·∫•u h√¨nh
local autocookItems = {"Morsel", "Steak", "Ribs", "Salmon", "Mackerel"}
local autoCookEnabledItems = {}
local autoCookEnabled = _G.AutoCookEnabled or false
local campfireDropPos = campfireDropPos or Vector3.new(0, 19, 0)

------------------------------------------------------
-- üçó Dropdown ch·ªçn lo·∫°i th·ª©c ƒÉn
TabMain:AddDropdown({
    Name = "Select Food",
    Description = "Ch·ªçn lo·∫°i th·ª©c ƒÉn ƒë·ªÉ t·ª± ƒë·ªông n∆∞·ªõng t·∫°i Campfire",
    Options = autocookItems,
    Default = _G.SelectedAutoCookItems or {},
    Multi = true,
    AllowNone = true,
    Callback = function(options)
        _G.SelectedAutoCookItems = options
        for _, itemName in ipairs(autocookItems) do
            autoCookEnabledItems[itemName] = table.find(options, itemName) ~= nil
        end
    end
})

------------------------------------------------------
-- üî• Toggle b·∫≠t/t·∫Øt Auto Cook
TabMain:AddToggle({
    Name = "Auto Cook Food",
    Description = "T·ª± ƒë·ªông n∆∞·ªõng c√°c lo·∫°i th·ª©c ƒÉn ƒë√£ ch·ªçn",
    Default = autoCookEnabled,
    Callback = function(Value)
        _G.AutoCookEnabled = Value
        autoCookEnabled = Value
    end
})

------------------------------------------------------
-- ‚ôªÔ∏è V√≤ng l·∫∑p ch√≠nh (t·ª± ƒë·ªông n∆∞·ªõng)
task.spawn(function()
    while task.wait(0.5) do
        if autoCookEnabled then
            local itemsFolder = workspace:FindFirstChild("Items")
            if not itemsFolder then
                warn("[AutoCook] Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c 'Items'")
                continue
            end

            for itemName, enabled in pairs(autoCookEnabledItems) do
                if enabled then
                    for _, item in ipairs(itemsFolder:GetChildren()) do
                        if item.Name == itemName then
                            pcall(function()
                                moveItemToPos(item, campfireDropPos)
                            end)
                        end
                    end
                end
            end
        end
    end
end)

---------------------------------------------------------------------------------
-- Ph·∫ßn Item
---------------------------------------------------------------------------------

local Section = TabItem:AddSection({"Fuel"})

-- ‚õΩ Auto Bring Fuel Items (Fluent Style)
local fuelToggleEnabled = false
local fuelLoopRunning = false
local selectedFuelItems = selectedFuelItems or {}

TabItem:AddDropdown({
    Name = "Select Fuel Items",
    Description = "Ch·ªçn c√°c v·∫≠t ph·∫©m nhi√™n li·ªáu (Fuel) ƒë·ªÉ mang theo",
    Options = fuelItems,
    Default = {},
    MultiSelect = true,
    Callback = function(options)
        selectedFuelItems = options
    end
})

TabItem:AddToggle({
    Name = "Bring Fuel Items",
    Description = "T·ª± ƒë·ªông mang v·∫≠t ph·∫©m nhi√™n li·ªáu ƒë√£ ch·ªçn (h√£y m·ªü kh√≥a √≠t nh·∫•t 1 khu v·ª±c tr∆∞·ªõc)",
    Default = false,
    Callback = function(Value)
        fuelToggleEnabled = Value

        if Value then
            if #selectedFuelItems > 0 then
                fuelLoopRunning = true

                task.spawn(function()
                    while fuelLoopRunning and fuelToggleEnabled do
                        pcall(function()
                            if #selectedFuelItems > 0 then
                                bypassBringSystem(selectedFuelItems, function()
                                    return fuelToggleEnabled
                                end)
                            end
                        end)

                        -- ƒê·ª£i 3s gi·ªØa m·ªói v√≤ng, c√≥ th·ªÉ d·ª´ng s·ªõm n·∫øu t·∫Øt toggle
                        local waitTime = 0
                        while waitTime < 3 and fuelToggleEnabled and fuelLoopRunning do
                            task.wait(0.1)
                            waitTime += 0.1
                        end
                    end
                    fuelLoopRunning = false
                end)
            else
                fuelToggleEnabled = false
                warn("[Fuel] ‚ö†Ô∏è Kh√¥ng c√≥ v·∫≠t ph·∫©m n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ mang theo.")
            end
        else
            fuelLoopRunning = false
        end
    end
})



local Section = TabItem:AddSection({"Junk"})


-- üß∫ Auto Bring Junk Items (Fluent Style)
local junkToggleEnabled = false
local junkLoopRunning = false
local selectedJunkItems = selectedJunkItems or {}

TabItem:AddDropdown({
    Name = "Select Junk Items",
    Description = "Ch·ªçn c√°c v·∫≠t ph·∫©m Junk m√† b·∫°n mu·ªën mang theo",
    Options = junkItems,
    Default = {},
    MultiSelect = true,
    Callback = function(options)
        selectedJunkItems = options
    end
})

TabItem:AddToggle({
    Name = "Bring Junk Items",
    Description = "T·ª± ƒë·ªông mang c√°c v·∫≠t ph·∫©m Junk ƒë√£ ch·ªçn (h√£y m·ªü kho√° √≠t nh·∫•t 1 khu v·ª±c tr∆∞·ªõc)",
    Default = false,
    Callback = function(Value)
        junkToggleEnabled = Value

        if Value then
            if #selectedJunkItems > 0 then
                junkLoopRunning = true

                task.spawn(function()
                    while junkLoopRunning and junkToggleEnabled do
                        pcall(function()
                            if #selectedJunkItems > 0 then
                                bypassBringSystem(selectedJunkItems, function()
                                    return junkToggleEnabled
                                end)
                            end
                        end)

                        -- Ch·ªù 3 gi√¢y, c√≥ th·ªÉ d·ª´ng ngay khi t·∫Øt
                        local waitTime = 0
                        while waitTime < 3 and junkToggleEnabled and junkLoopRunning do
                            task.wait(0.1)
                            waitTime += 0.1
                        end
                    end

                    junkLoopRunning = false
                end)
            else
                junkToggleEnabled = false
                warn("[Junk] ‚ùå Kh√¥ng c√≥ v·∫≠t ph·∫©m n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ mang theo.")
            end
        else
            junkLoopRunning = false
        end
    end
})


local Section = TabItem:AddSection({"Blue Print"})

-- üß± Auto Bring BluePrint Items (Fluent Style)
local BlueprintToggleEnabled = false
local BlueprintLoopRunning = false
local selectedBlueprintItems = selectedBlueprintItems or {}

TabItem:AddDropdown({
    Name = "Select Blueprint Items",
    Description = "Ch·ªçn c√°c v·∫≠t ph·∫©m Blueprint b·∫°n mu·ªën mang theo",
    Options = selectedBlueprintItems,
    Default = {},
    MultiSelect = true,
    Callback = function(options)
        selectedBlueprintItems = options
    end
})

TabItem:AddToggle({
    Name = "Bring Blueprint Items",
    Description = "T·ª± ƒë·ªông mang c√°c v·∫≠t ph·∫©m Blueprint ƒë√£ ch·ªçn (h√£y m·ªü kho√° khu v·ª±c tr∆∞·ªõc)",
    Default = false,
    Callback = function(Value)
        BlueprintToggleEnabled = Value

        if Value then
            if #selectedBlueprintItems > 0 then
                BlueprintLoopRunning = true

                task.spawn(function()
                    while BlueprintLoopRunning and BlueprintToggleEnabled do
                        pcall(function()
                            if #selectedBlueprintItems > 0 then
                                bypassBringSystem(selectedBlueprintItems, function()
                                    return BlueprintToggleEnabled
                                end)
                            end
                        end)

                        -- Ch·ªù 3 gi√¢y, c√≥ th·ªÉ d·ª´ng b·∫•t k·ª≥ l√∫c n√†o
                        local waitTime = 0
                        while waitTime < 3 and BlueprintToggleEnabled and BlueprintLoopRunning do
                            task.wait(0.1)
                            waitTime += 0.1
                        end
                    end

                    BlueprintLoopRunning = false
                end)
            else
                BlueprintToggleEnabled = false
                warn("[Blueprint] ‚ùå Kh√¥ng c√≥ v·∫≠t ph·∫©m n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ mang theo.")
            end
        else
            BlueprintLoopRunning = false
        end
    end
})


local Section = TabItem:AddSection({"Food"})


-- üçñ Auto Bring Food Items (Fluent Style)
local foodToggleEnabled = false
local foodLoopRunning = false
local selectedFoodItems = selectedFoodItems or {}

TabItem:AddDropdown({
    Name = "Select Food Items",
    Description = "Ch·ªçn c√°c v·∫≠t ph·∫©m th·ª©c ƒÉn (Food) ƒë·ªÉ mang theo",
    Options = foodItems,
    Default = {},
    MultiSelect = true,
    Callback = function(options)
        selectedFoodItems = options
    end
})

TabItem:AddToggle({
    Name = "Bring Food Items",
    Description = "T·ª± ƒë·ªông mang th·ª©c ƒÉn ƒë√£ ch·ªçn (h√£y m·ªü kh√≥a √≠t nh·∫•t 1 khu v·ª±c tr∆∞·ªõc)",
    Default = false,
    Callback = function(Value)
        foodToggleEnabled = Value

        if Value then
            if #selectedFoodItems > 0 then
                foodLoopRunning = true

                task.spawn(function()
                    while foodLoopRunning and foodToggleEnabled do
                        pcall(function()
                            if #selectedFoodItems > 0 then
                                bypassBringSystem(selectedFoodItems, function()
                                    return foodToggleEnabled
                                end)
                            end
                        end)

                        -- ƒê·ª£i 3 gi√¢y gi·ªØa m·ªói v√≤ng, c√≥ th·ªÉ d·ª´ng s·ªõm n·∫øu toggle t·∫Øt
                        local waitTime = 0
                        while waitTime < 3 and foodToggleEnabled and foodLoopRunning do
                            task.wait(0.1)
                            waitTime += 0.1
                        end
                    end
                    foodLoopRunning = false
                end)
            else
                foodToggleEnabled = false
                warn("[Food] ‚ö†Ô∏è Kh√¥ng c√≥ v·∫≠t ph·∫©m n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ mang theo.")
            end
        else
            foodLoopRunning = false
        end
    end
})


local Section = TabItem:AddSection({"Pelts"})


-- ü¶ä Auto Bring Pelts Items (Fluent Style)
local PeltsToggleEnabled = false
local PeltsLoopRunning = false
local selectedPeltsItems = selectedPeltsItems or {}

TabItem:AddDropdown({
    Name = "Select Pelts Items",
    Description = "Ch·ªçn c√°c v·∫≠t ph·∫©m Pelts b·∫°n mu·ªën mang theo",
    Options = PeltsItems,
    Default = {},
    MultiSelect = true,
    Callback = function(options)
        selectedPeltsItems = options
    end
})

TabItem:AddToggle({
    Name = "Bring Pelts Items",
    Description = "T·ª± ƒë·ªông mang c√°c v·∫≠t ph·∫©m Pelts ƒë√£ ch·ªçn (h√£y m·ªü kho√° √≠t nh·∫•t 1 khu v·ª±c tr∆∞·ªõc)",
    Default = false,
    Callback = function(Value)
        PeltsToggleEnabled = Value

        if Value then
            if #selectedPeltsItems > 0 then
                PeltsLoopRunning = true

                task.spawn(function()
                    while PeltsLoopRunning and PeltsToggleEnabled do
                        pcall(function()
                            if #selectedPeltsItems > 0 then
                                bypassBringSystem(selectedPeltsItems, function()
                                    return PeltsToggleEnabled
                                end)
                            end
                        end)

                        -- Ch·ªù c√≥ th·ªÉ d·ª´ng ngay khi t·∫Øt
                        local waitTime = 0
                        while waitTime < 3 and PeltsToggleEnabled and PeltsLoopRunning do
                            task.wait(0.1)
                            waitTime += 0.1
                        end
                    end

                    PeltsLoopRunning = false
                end)
            else
                PeltsToggleEnabled = false
                warn("[Pelts] ‚ùå Kh√¥ng c√≥ v·∫≠t ph·∫©m n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ mang theo.")
            end
        else
            PeltsLoopRunning = false
        end
    end
})

local Section = TabItem:AddSection({"Medicine"})

-- üíä Auto Bring Medical Items (Fluent Style)
local medicalToggleEnabled = false
local medicalLoopRunning = false
local selectedMedicalItems = selectedMedicalItems or {}

TabItem:AddDropdown({
    Name = "Select Medical Items",
    Description = "Ch·ªçn c√°c v·∫≠t ph·∫©m y t·∫ø (Medical) ƒë·ªÉ mang theo",
    Options = medicalItems,
    Default = {},
    MultiSelect = true,
    Callback = function(options)
        selectedMedicalItems = options
    end
})

TabItem:AddToggle({
    Name = "Bring Medical Items",
    Description = "T·ª± ƒë·ªông mang c√°c v·∫≠t ph·∫©m y t·∫ø ƒë√£ ch·ªçn (h√£y m·ªü kh√≥a √≠t nh·∫•t 1 khu v·ª±c tr∆∞·ªõc)",
    Default = false,
    Callback = function(Value)
        medicalToggleEnabled = Value

        if Value then
            if #selectedMedicalItems > 0 then
                medicalLoopRunning = true

                task.spawn(function()
                    while medicalLoopRunning and medicalToggleEnabled do
                        pcall(function()
                            if #selectedMedicalItems > 0 then
                                bypassBringSystem(selectedMedicalItems, function()
                                    return medicalToggleEnabled
                                end)
                            end
                        end)

                        -- ƒê·ª£i 3 gi√¢y gi·ªØa m·ªói v√≤ng, c√≥ th·ªÉ d·ª´ng s·ªõm n·∫øu toggle b·ªã t·∫Øt
                        local waitTime = 0
                        while waitTime < 3 and medicalToggleEnabled and medicalLoopRunning do
                            task.wait(0.1)
                            waitTime += 0.1
                        end
                    end
                    medicalLoopRunning = false
                end)
            else
                medicalToggleEnabled = false
                warn("[Medical] ‚ö†Ô∏è Kh√¥ng c√≥ v·∫≠t ph·∫©m y t·∫ø n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ mang theo.")
            end
        else
            medicalLoopRunning = false
        end
    end
})


local Section = TabItem:AddSection({"Equipment"})

-- ‚öôÔ∏è Equipment Bring System
TabItem:AddDropdown({
    Name = "Select Equipment Items",
    Description = "Ch·ªçn c√°c v·∫≠t ph·∫©m trang b·ªã mu·ªën mang",
    Default = {},
    Options = equipmentItems,
    MultiSelect = true,
    Callback = function(options)
        selectedEquipmentItems = options
    end
})

TabItem:AddToggle({
    Name = "Bring Equipment Items",
    Description = "Tr∆∞·ªõc khi mang h√£y m·ªü kh√≥a √≠t nh·∫•t 1 khu v·ª±c!",
    Default = false,
    Callback = function(Value)
        equipmentToggleEnabled = Value

        if Value then
            if #selectedEquipmentItems > 0 then
                equipmentLoopRunning = true
                task.spawn(function()
                    while equipmentLoopRunning and equipmentToggleEnabled do
                        if #selectedEquipmentItems > 0 and equipmentToggleEnabled then
                            bypassBringSystem(selectedEquipmentItems, function() 
                                return equipmentToggleEnabled 
                            end)
                        end

                        -- Ch·ªù v·ªõi ki·ªÉm tra d·ª´ng an to√†n
                        local waitTime = 0
                        while waitTime < 3 and equipmentToggleEnabled and equipmentLoopRunning do
                            task.wait(0.1)
                            waitTime += 0.1
                        end
                    end
                    equipmentLoopRunning = false
                end)
            else
                equipmentToggleEnabled = false
            end
        else
            equipmentLoopRunning = false
        end
    end
})

---------------------------------------------------------------------------------
-- Ph·∫ßn Teleport
---------------------------------------------------------------------------------

-- üó∫Ô∏è Teleport Buttons (chu·∫©n Fluent GUI)
TabTeleport:AddButton({
    Name = "Teleport to Campfire",
    Description = "D·ªãch chuy·ªÉn ngay ƒë·∫øn khu v·ª±c Campfire",
    Callback = function()
        tp1()
    end
})

TabTeleport:AddButton({
    Name = "Teleport to Stronghold",
    Description = "D·ªãch chuy·ªÉn ƒë·∫øn cƒÉn c·ª© Stronghold",
    Callback = function()
        tp2()
    end
})

TabTeleport:AddButton({
    Name = "Teleport to Safe Zone",
    Description = "T·∫°o Safe Zone tr√™n kh√¥ng v√† d·ªãch chuy·ªÉn ƒë·∫øn ƒë√≥",
    Callback = function()
        if not workspace:FindFirstChild("SafeZonePart") then
            local createpart = Instance.new("Part")
            createpart.Name = "SafeZonePart"
            createpart.Size = Vector3.new(30, 3, 30)
            createpart.Position = Vector3.new(0, 350, 0)
            createpart.Anchored = true
            createpart.CanCollide = true
            createpart.Transparency = 0.8
            createpart.Color = Color3.fromRGB(255, 0, 0)
            createpart.Parent = workspace
        end
        local player = game:GetService("Players").LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")
        hrp.CFrame = CFrame.new(0, 360, 0)
    end
})

TabTeleport:AddButton({
    Name = "Teleport to Trader (Bunny Foot)",
    Description = "D·ªãch chuy·ªÉn ƒë·∫øn khu v·ª±c th∆∞∆°ng nh√¢n Bunny Foot",
    Callback = function()
        local pos = Vector3.new(-37.08, 3.98, -16.33)
        local player = game:GetService("Players").LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")
        hrp.CFrame = CFrame.new(pos)
    end
})


local Section = TabTeleport:AddSection({"Children"})

-- üß≠ Teleport to Child (Mob)
TabTeleport:AddDropdown({
    Name = "Select Child",
    Description = "Ch·ªçn ƒë·ªëi t∆∞·ª£ng (Mob) ƒë·ªÉ d·ªãch chuy·ªÉn t·ªõi",
    Options = currentMobNames,
    Default = currentMobNames[1],
    Multi = false,
    AllowNone = true,
    Callback = function(selected)
        selectedMob = selected
    end
})

TabTeleport:AddButton({
    Name = "Refresh List",
    Description = "L√†m m·ªõi danh s√°ch Child hi·ªán c√≥",
    Callback = function()
        currentMobs, currentMobNames = getMobs()
        if #currentMobNames > 0 then
            selectedMob = currentMobNames[1]
            MobDropdown:Refresh(currentMobNames)
        else
            selectedMob = nil
            MobDropdown:Refresh({ "‚ö†Ô∏è No child found" })
        end
    end
})

TabTeleport:AddButton({
    Name = "Teleport to Child",
    Description = "D·ªãch chuy·ªÉn ƒë·∫øn ƒë·ªëi t∆∞·ª£ng ƒë√£ ch·ªçn",
    Callback = function()
        if selectedMob and currentMobs then
            for i, name in ipairs(currentMobNames) do
                if name == selectedMob then
                    local targetMob = currentMobs[i]
                    if targetMob then
                        local part = targetMob.PrimaryPart or targetMob:FindFirstChildWhichIsA("BasePart")
                        if part then
                            local player = game:GetService("Players").LocalPlayer
                            local character = player.Character or player.CharacterAdded:Wait()
                            local hrp = character:FindFirstChild("HumanoidRootPart")
                            if hrp then
                                hrp.CFrame = part.CFrame + Vector3.new(0, 5, 0)
                            end
                        end
                    end
                    break
                end
            end
        else
            warn("‚ö†Ô∏è No child selected or found in currentMobs.")
        end
    end
})



local Section = TabTeleport:AddSection({"Chest"})

-- üí∞ Teleport to Chest
TabTeleport:AddDropdown({
    Name = "Select Chest",
    Description = "Ch·ªçn r∆∞∆°ng (Chest) ƒë·ªÉ d·ªãch chuy·ªÉn t·ªõi",
    Options = currentChestNames,
    Default = currentChestNames[1],
    Multi = false,
    AllowNone = true,
    Callback = function(selected)
        selectedChest = selected
    end
})

TabTeleport:AddButton({
    Name = "Refresh List",
    Description = "L√†m m·ªõi danh s√°ch Chest hi·ªán c√≥",
    Callback = function()
        currentChests, currentChestNames = getChests()
        if #currentChestNames > 0 then
            selectedChest = currentChestNames[1]
            ChestDropdown:Refresh(currentChestNames)
        else
            selectedChest = nil
            ChestDropdown:Refresh({ "‚ö†Ô∏è No chests found" })
        end
    end
})

TabTeleport:AddButton({
    Name = "Teleport to Chest",
    Description = "D·ªãch chuy·ªÉn ƒë·∫øn r∆∞∆°ng ƒë√£ ch·ªçn",
    Callback = function()
        if selectedChest and currentChests then
            local chestIndex = table.find(currentChestNames, selectedChest) or 1
            local targetChest = currentChests[chestIndex]

            if targetChest then
                local part = targetChest.PrimaryPart or targetChest:FindFirstChildWhichIsA("BasePart")
                if part then
                    local player = game:GetService("Players").LocalPlayer
                    local character = player.Character or player.CharacterAdded:Wait()
                    local hrp = character:FindFirstChild("HumanoidRootPart")

                    if hrp then
                        hrp.CFrame = part.CFrame + Vector3.new(0, 5, 0)
                    end
                end
            else
                warn("‚ö†Ô∏è Chest not found in currentChests.")
            end
        else
            warn("‚ö†Ô∏è No chest selected or list empty.")
        end
    end
})

---------------------------------------------------------------------------------
-- Ph·∫ßn Misc
---------------------------------------------------------------------------------

local Lighting = game:GetService("Lighting")
local RunService = game:GetService("RunService")

-- üåï FullBright Settings
local fullBrightEnabled = false
local fullBrightLoop

local function applyFullBright()
    if not fullBrightEnabled then return end
    Lighting.Ambient = Color3.fromRGB(200, 200, 200) -- s√°ng nh·∫π
    Lighting.Brightness = 4 -- gi·∫£m ƒë·ªô s√°ng t·ª´ 10 ‚Üí 4
    Lighting.GlobalShadows = false
end

local function enableFullBright()
    if fullBrightLoop then fullBrightLoop:Disconnect() end
    applyFullBright()
    fullBrightLoop = Lighting:GetPropertyChangedSignal("ClockTime"):Connect(applyFullBright)
end

local function disableFullBright()
    if fullBrightLoop then
        fullBrightLoop:Disconnect()
        fullBrightLoop = nil
    end
    Lighting.Ambient = Color3.fromRGB(128, 128, 128)
    Lighting.Brightness = 1
    Lighting.GlobalShadows = true
end

-- ‚úÖ Toggle m·ªõi: FullBright
TabMisc:AddToggle({
    Name = "Full Bright",
    Description = "T·ª± ƒë·ªông l√†m s√°ng to√†n b·∫£n ƒë·ªì",
    Default = _G.FullBright or false,
    Callback = function(Value)
        _G.FullBright = Value
        fullBrightEnabled = Value
        if Value then
            enableFullBright()
        else
            disableFullBright()
        end
    end
})

-- üå´Ô∏è Remove Fog Settings
local fogEnabled = false
local fogLoop

local function removeFog()
    Lighting.FogStart = 0
    Lighting.FogEnd = 1000000

    local atmosphere = Lighting:FindFirstChild("Atmosphere")
    if atmosphere then
        atmosphere.Density = 0
        atmosphere.Offset = 0
        atmosphere.Haze = 0
        atmosphere.Color = Color3.new(1, 1, 1)
    end
end

local function restoreFog()
    Lighting.FogStart = 200
    Lighting.FogEnd = 1000

    local atmosphere = Lighting:FindFirstChild("Atmosphere")
    if atmosphere then
        atmosphere.Density = 0.3
        atmosphere.Offset = 0
        atmosphere.Haze = 0.5
        atmosphere.Color = Color3.fromRGB(200, 200, 200)
    end
end

-- ‚úÖ Toggle m·ªõi: Remove Fog
TabMisc:AddToggle({
    Name = "Remove Fog",
    Description = "X√≥a s∆∞∆°ng m√π v√† l√†m t·∫ßm nh√¨n r√µ h∆°n",
    Default = _G.RemoveFog or false,
    Callback = function(Value)
        _G.RemoveFog = Value
        fogEnabled = Value
        if Value then
            removeFog()
            fogLoop = RunService.Heartbeat:Connect(removeFog)
        else
            if fogLoop then fogLoop:Disconnect() fogLoop = nil end
            restoreFog()
        end
    end
})


local Section = TabMisc:AddSection({"Bypass"})

-- üß© Services
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local HumanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- ‚öôÔ∏è Bi·∫øn to√†n c·ª•c
local torchLoop
local escapeLoopOwl
local escapeLoopDeer

-- ü¶â / ü¶å Config
local ESCAPE_DISTANCE_OWL = 80
local ESCAPE_SPEED_OWL = 5

local ESCAPE_DISTANCE_DEER = 60
local ESCAPE_SPEED_DEER = 4


------------------------------------------------------------
-- ü¶å Auto Stun Deer (Need Flashlight)
------------------------------------------------------------
TabMisc:AddToggle({
    Name = "Auto Stun Deer",
    Description = "T·ª± ƒë·ªông l√†m Deer b·ªã cho√°ng (c·∫ßn c·∫ßm Flashlight)",
    Default = false,
    Callback = function(Value)
        if Value then
            torchLoop = RunService.RenderStepped:Connect(function()
                pcall(function()
                    local remote = ReplicatedStorage:FindFirstChild("RemoteEvents")
                    if not remote then return end
                    local deerRemote = remote:FindFirstChild("DeerHitByTorch")
                    local deer = Workspace:FindFirstChild("Characters")
                        and Workspace.Characters:FindFirstChild("Deer")

                    if deerRemote and deer then
                        deerRemote:InvokeServer(deer)
                    end
                end)
                task.wait(0.1)
            end)
        else
            if torchLoop then
                torchLoop:Disconnect()
                torchLoop = nil
            end
        end
    end
})


------------------------------------------------------------
-- ü¶â Escape From Owl
------------------------------------------------------------
TabMisc:AddToggle({
    Name = "Escape From Owl",
    Description = "T·ª± ƒë·ªông tr√°nh xa Owl khi ·ªü g·∫ßn",
    Default = false,
    Callback = function(Value)
        if Value then
            escapeLoopOwl = RunService.RenderStepped:Connect(function()
                pcall(function()
                    local characters = Workspace:FindFirstChild("Characters")
                    if not characters then return end
                    local owl = characters:FindFirstChild("Owl")

                    if owl and owl:FindFirstChild("HumanoidRootPart") then
                        local myPos = HumanoidRootPart.Position
                        local owlPos = owl.HumanoidRootPart.Position
                        local distance = (myPos - owlPos).Magnitude

                        if distance < ESCAPE_DISTANCE_OWL then
                            local direction = (myPos - owlPos).Unit
                            HumanoidRootPart.CFrame = HumanoidRootPart.CFrame + direction * ESCAPE_SPEED_OWL
                        end
                    end
                end)
            end)
        else
            if escapeLoopOwl then
                escapeLoopOwl:Disconnect()
                escapeLoopOwl = nil
            end
        end
    end
})


------------------------------------------------------------
-- ü¶å Escape From Deer
------------------------------------------------------------
TabMisc:AddToggle({
    Name = "Escape From Deer",
    Description = "T·ª± ƒë·ªông tr√°nh xa Deer khi ·ªü g·∫ßn",
    Default = false,
    Callback = function(Value)
        if Value then
            escapeLoopDeer = RunService.RenderStepped:Connect(function()
                pcall(function()
                    local characters = Workspace:FindFirstChild("Characters")
                    if not characters then return end
                    local deer = characters:FindFirstChild("Deer")

                    if deer and deer:FindFirstChild("HumanoidRootPart") then
                        local myPos = HumanoidRootPart.Position
                        local deerPos = deer.HumanoidRootPart.Position
                        local distance = (myPos - deerPos).Magnitude

                        if distance < ESCAPE_DISTANCE_DEER then
                            local direction = (myPos - deerPos).Unit
                            HumanoidRootPart.CFrame = HumanoidRootPart.CFrame + direction * ESCAPE_SPEED_DEER
                        end
                    end
                end)
            end)
        else
            if escapeLoopDeer then
                escapeLoopDeer:Disconnect()
                escapeLoopDeer = nil
            end
        end
    end
})

local Section = TabMisc:AddSection({"Show"})


-- ‚öôÔ∏è FPS + Ping Drawing Setup
local showFPS = true
local showPing = true

local fpsText = Drawing.new("Text")
fpsText.Size = 16
fpsText.Position = Vector2.new(workspace.CurrentCamera.ViewportSize.X - 100, 10)
fpsText.Color = Color3.fromRGB(0, 255, 0)
fpsText.Center = false
fpsText.Outline = true
fpsText.Visible = showFPS

local msText = Drawing.new("Text")
msText.Size = 16
msText.Position = Vector2.new(workspace.CurrentCamera.ViewportSize.X - 100, 30)
msText.Color = Color3.fromRGB(0, 255, 0)
msText.Center = false
msText.Outline = true
msText.Visible = showPing

local fpsCounter = 0
local fpsLastUpdate = tick()

RunService.RenderStepped:Connect(function()
    fpsCounter += 1
    if tick() - fpsLastUpdate >= 1 then
        -- üßÆ Update FPS
        if showFPS then
            fpsText.Text = "FPS: " .. tostring(fpsCounter)
            fpsText.Visible = true
        else
            fpsText.Visible = false
        end

        -- üåê Update Ping
        if showPing then
            local pingStat = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]
            local ping = pingStat and math.floor(pingStat:GetValue()) or 0
            msText.Text = "Ping: " .. ping .. " ms"

            if ping <= 60 then
                msText.Color = Color3.fromRGB(0, 255, 0)
            elseif ping <= 120 then
                msText.Color = Color3.fromRGB(255, 165, 0)
            else
                msText.Color = Color3.fromRGB(255, 0, 0)
            end

            msText.Visible = true
        else
            msText.Visible = false
        end

        fpsCounter = 0
        fpsLastUpdate = tick()
    end
end)

-- ‚úÖ Fluent GUI Toggle format m·ªõi
TabMisc:AddToggle({
    Name = "Show FPS",
    Description = "Hi·ªÉn th·ªã s·ªë khung h√¨nh (FPS) tr√™n m√†n h√¨nh",
    Default = _G.ShowFPS or true,
    Callback = function(Value)
        _G.ShowFPS = Value
        showFPS = Value
        fpsText.Visible = Value
    end
})

TabMisc:AddToggle({
    Name = "Show Ping",
    Description = "Hi·ªÉn th·ªã ƒë·ªô tr·ªÖ m·∫°ng (Ping) tr√™n m√†n h√¨nh",
    Default = _G.ShowPing or true,
    Callback = function(Value)
        _G.ShowPing = Value
        showPing = Value
        msText.Visible = Value
    end
})

